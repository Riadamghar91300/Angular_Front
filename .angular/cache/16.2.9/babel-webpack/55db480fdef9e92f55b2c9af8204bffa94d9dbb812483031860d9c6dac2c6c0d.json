{"ast":null,"code":"import { BehaviorSubject, catchError, retry, throwError } from 'rxjs';\nimport { STUDENTS_MOCKED } from 'src/mocks/student.mock';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Décoration du service comme injectable et en tant que service racine\nexport class StudentService {\n  // Constructeur du service, injectant le module HttpClient\n  constructor(http) {\n    this.http = http;\n    // URL de l'API à utiliser\n    this.apiURL = 'http://localhost:3000';\n    // Liste d'étudiants simulée initiale provenant du fichier mock\n    this.studentList = STUDENTS_MOCKED;\n    // Observable BehaviorSubject qui émet la liste actuelle d'étudiants\n    this.students$ = new BehaviorSubject(this.studentList);\n    // Options HTTP pour les requêtes\n    this.httpOption = {\n      headers: new HttpHeaders({\n        'content-type': 'application/json'\n      })\n    };\n  }\n  // Méthode pour récupérer un étudiant depuis l'API\n  getStudent() {\n    // Utilisation du module HttpClient pour effectuer une requête GET vers l'API\n    return this.http.get(this.apiURL + '/').pipe(retry(1),\n    // Tentatives de réessai en cas d'échec\n    catchError(this.handleError) // Gestion des erreurs\n    );\n  }\n  // Méthode de gestion des erreurs HTTP\n  handleError(error) {\n    let errMsg = '';\n    // Vérification du type d'erreur (réseau ou application)\n    if (error.error instanceof ErrorEvent) {\n      errMsg = error.error.message; // Erreur liée au réseau\n    } else {\n      errMsg = `Error Code : ${error.status}\\nMessage : ${error.message}`; // Erreur liée à l'application\n    }\n    // Affichage de l'erreur dans une fenêtre d'alerte\n    window.alert(errMsg);\n    // Retourne une observable avec l'erreur\n    return throwError(() => {\n      return errMsg;\n    });\n  }\n  static #_ = this.ɵfac = function StudentService_Factory(t) {\n    return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StudentService,\n    factory: StudentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","catchError","retry","throwError","STUDENTS_MOCKED","HttpHeaders","StudentService","constructor","http","apiURL","studentList","students$","httpOption","headers","getStudent","get","pipe","handleError","error","errMsg","ErrorEvent","message","status","window","alert","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\riada\\Desktop\\riad AMGHAR\\M1 paris 8\\tiw\\tiw\\projet\\Projet MEKOUAR\\Angular_youssef-main\\Angular_youssef-main\\Angular_Front\\src\\services\\student\\student.service.ts"],"sourcesContent":["// Importation des modules et classes nécessaires depuis Angular et RxJS\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, catchError, retry, throwError } from 'rxjs';\nimport { STUDENTS_MOCKED } from 'src/mocks/student.mock';\nimport { Student } from 'src/models/student';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n// Décoration du service comme injectable et en tant que service racine\n@Injectable({\n    providedIn: 'root'\n})\nexport class StudentService {\n\n    // URL de l'API à utiliser\n    apiURL = 'http://localhost:3000';\n\n    // Liste d'étudiants simulée initiale provenant du fichier mock\n    private studentList: Student[] = STUDENTS_MOCKED;\n\n    // Observable BehaviorSubject qui émet la liste actuelle d'étudiants\n    public students$: BehaviorSubject<Student[]> = new BehaviorSubject(this.studentList);\n\n    // Constructeur du service, injectant le module HttpClient\n    constructor(private http: HttpClient) {\n    }\n\n    // Options HTTP pour les requêtes\n    httpOption = {\n        headers: new HttpHeaders({\n            'content-type': 'application/json',\n        })\n    }\n\n    // Méthode pour récupérer un étudiant depuis l'API\n    getStudent(): Observable<Student> {\n        // Utilisation du module HttpClient pour effectuer une requête GET vers l'API\n        return this.http.get<Student>(this.apiURL + '/').pipe(\n            retry(1), // Tentatives de réessai en cas d'échec\n            catchError(this.handleError) // Gestion des erreurs\n        );\n    }\n\n    // Méthode de gestion des erreurs HTTP\n    handleError(error: any) {\n        let errMsg = '';\n        // Vérification du type d'erreur (réseau ou application)\n        if (error.error instanceof ErrorEvent) {\n            errMsg = error.error.message;  // Erreur liée au réseau\n        } else {\n            errMsg = `Error Code : ${error.status}\\nMessage : ${error.message}`;  // Erreur liée à l'application\n        }\n        // Affichage de l'erreur dans une fenêtre d'alerte\n        window.alert(errMsg);\n        // Retourne une observable avec l'erreur\n        return throwError(() => {\n            return errMsg;\n        });\n    }\n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;AACjF,SAASC,eAAe,QAAQ,wBAAwB;AAExD,SAAqBC,WAAW,QAAQ,sBAAsB;;;AAE9D;AAIA,OAAM,MAAOC,cAAc;EAWvB;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAVxB;IACA,KAAAC,MAAM,GAAG,uBAAuB;IAEhC;IACQ,KAAAC,WAAW,GAAcN,eAAe;IAEhD;IACO,KAAAO,SAAS,GAA+B,IAAIX,eAAe,CAAC,IAAI,CAACU,WAAW,CAAC;IAMpF;IACA,KAAAE,UAAU,GAAG;MACTC,OAAO,EAAE,IAAIR,WAAW,CAAC;QACrB,cAAc,EAAE;OACnB;KACJ;EAPD;EASA;EACAS,UAAUA,CAAA;IACN;IACA,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAU,IAAI,CAACN,MAAM,GAAG,GAAG,CAAC,CAACO,IAAI,CACjDd,KAAK,CAAC,CAAC,CAAC;IAAE;IACVD,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;KAChC;EACL;EAEA;EACAA,WAAWA,CAACC,KAAU;IAClB,IAAIC,MAAM,GAAG,EAAE;IACf;IACA,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACnCD,MAAM,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO,CAAC,CAAE;KAClC,MAAM;MACHF,MAAM,GAAG,gBAAgBD,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACG,OAAO,EAAE,CAAC,CAAE;;IAE1E;IACAE,MAAM,CAACC,KAAK,CAACL,MAAM,CAAC;IACpB;IACA,OAAOhB,UAAU,CAAC,MAAK;MACnB,OAAOgB,MAAM;IACjB,CAAC,CAAC;EACN;EAAC,QAAAM,CAAA,G;qBA9CQnB,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxB,cAAc;IAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}