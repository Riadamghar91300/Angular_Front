{"ast":null,"code":"import { BehaviorSubject, catchError, retry, throwError } from 'rxjs';\nimport { STUDENTS_MOCKED } from 'src/mocks/student.mock';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = 'http://localhost:3000';\n    this.studentList = STUDENTS_MOCKED;\n    this.students$ = new BehaviorSubject(this.studentList);\n    this.httpOption = {\n      headers: new HttpHeaders({\n        'content-type': 'application/json'\n      })\n    };\n  }\n  getStudent() {\n    return this.http.get(this.apiURL + '/').pipe(retry(1), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errMsg = '';\n    if (error.error instanceof ErrorEvent) errMsg = error.error.message;else errMsg = `Error Code : ${error.statut}\\nMessage : ${error.message}`;\n    window.alert(errMsg);\n    return throwError(() => {\n      return errMsg;\n    });\n  }\n  static #_ = this.ɵfac = function StudentService_Factory(t) {\n    return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StudentService,\n    factory: StudentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","catchError","retry","throwError","STUDENTS_MOCKED","HttpHeaders","StudentService","constructor","http","apiURL","studentList","students$","httpOption","headers","getStudent","get","pipe","handleError","error","errMsg","ErrorEvent","message","statut","window","alert","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\riada\\Desktop\\riad AMGHAR\\M1 paris 8\\tiw\\tiw\\projet\\Projet MEKOUAR\\Angular_youssef-main\\Angular_youssef-main\\Angular_Front\\src\\services\\student\\student.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, catchError, retry, throwError } from 'rxjs';\nimport { STUDENTS_MOCKED } from 'src/mocks/student.mock';\nimport { Student } from 'src/models/student';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class StudentService {\n\n    apiURL = 'http://localhost:3000';\n    private studentList: Student[] = STUDENTS_MOCKED;\n    public students$: BehaviorSubject<Student[]> = new BehaviorSubject(this.studentList);\n\n    constructor(private http: HttpClient) {\n    }\n    httpOption = {\n        headers: new HttpHeaders({\n            'content-type': 'application/json',\n        })\n    }\n    getStudent(): Observable<Student> {\n        return this.http.get<Student>(this.apiURL + '/').pipe(retry(1), catchError(this.handleError));\n    }\n\n    handleError(error: any) {\n        let errMsg = '';\n        if (error.error instanceof ErrorEvent) errMsg = error.error.message;\n        else errMsg = `Error Code : ${error.statut}\\nMessage : ${error.message}`;\n        window.alert(errMsg);\n        return throwError(() => {\n            return errMsg;\n        })\n    }\n}"],"mappings":"AACA,SAASA,eAAe,EAAcC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;AACjF,SAASC,eAAe,QAAQ,wBAAwB;AAExD,SAAqBC,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,cAAc;EAMvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,MAAM,GAAG,uBAAuB;IACxB,KAAAC,WAAW,GAAcN,eAAe;IACzC,KAAAO,SAAS,GAA+B,IAAIX,eAAe,CAAC,IAAI,CAACU,WAAW,CAAC;IAIpF,KAAAE,UAAU,GAAG;MACTC,OAAO,EAAE,IAAIR,WAAW,CAAC;QACrB,cAAc,EAAE;OACnB;KACJ;EALD;EAMAS,UAAUA,CAAA;IACN,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAU,IAAI,CAACN,MAAM,GAAG,GAAG,CAAC,CAACO,IAAI,CAACd,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;EACjG;EAEAA,WAAWA,CAACC,KAAU;IAClB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAED,MAAM,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO,CAAC,KAC/DF,MAAM,GAAG,gBAAgBD,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACG,OAAO,EAAE;IACxEE,MAAM,CAACC,KAAK,CAACL,MAAM,CAAC;IACpB,OAAOhB,UAAU,CAAC,MAAK;MACnB,OAAOgB,MAAM;IACjB,CAAC,CAAC;EACN;EAAC,QAAAM,CAAA,G;qBAzBQnB,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxB,cAAc;IAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;IAAAC,UAAA,EAHX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}